#https://github.com/gcovr/gcovr
#https://github.com/danielpalme/ReportGenerator
#https://github.com/atlaste/CPPCoverage

stages:
  - test
  - build
  - release

tests-and-coverage:
  stage: test
  tags:
    - linux
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  rules: #if doing a release, does this cause code coverage to not show up on that release or something?
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test-coverage.xml
  script: #either regular or being caused by tag, this job shows $CI_PIPELINE_SOURCE == "push"
    - mkdir -p build
    - cd build
    - cmake -DBUILD_MODE=COVERAGE ..
    - cmake --build .
    - cd ..
    - ./build/unit-tests/source/unit-tests
    - gcovr --txt --cobertura test-coverage.xml ${CI_PROJECT_DIR}/build/stg-heap/source/CMakeFiles/stg-heap.dir

build-release-linux:
  variables:
    OUTPUT_DIR: "bin-lib-linux"
  stage: build
  rules:
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE != "web"
  tags:
    - linux
  artifacts:
    paths:
      - ${OUTPUT_DIR}
  script:
    - mkdir -p build
    - cd build
    - cmake -DBUILD_MODE=RELEASE_LINUX ..
    - cmake --build . --config Release
    - cd ..
    - mkdir -p ${OUTPUT_DIR}
    - cp build/stg-heap/source/libstg-heap.a ${OUTPUT_DIR}/libstg-heap.a
    - cp -r stg-heap/include ${OUTPUT_DIR}

build-release-win:
  variables:
    OUTPUT_DIR: "bin-lib-win"
  stage: build
  rules:
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE != "web"
  tags:
    - windows
  artifacts:
    paths:
      - ${OUTPUT_DIR}
  script:
    - mkdir -p build
    - cd build
    - cmake -DBUILD_MODE=RELEASE_WIN ..
    - cmake --build . --config Release
    - cd ..
    - mkdir -p ${OUTPUT_DIR}
    - cp out/build/x64-Release/stg-heap/source/stg-heap.lib ${OUTPUT_DIR}/libstg-heap.lib
    - cp -r stg-heap/include ${OUTPUT_DIR}

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE != "web" #&& $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH not avaliable in tag pipelines, need similar functionality
  variables:
    VERSION_NAME: 'v0.$CI_PIPELINE_IID'
    VNAME_FILE: 'v0-$CI_PIPELINE_IID'
    URL_PREF: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/stg-heap/${VERSION_NAME}
    URL_WIN: ${URL_PREF}/stg-heap-win.zip
    URL_LINUX: ${URL_PREF}/stg-heap-linux.zip
  tags:
    - linux
  needs: ["build-release-linux", "build-release-win"]
  script:
    - echo "Running release job."
    - cd bin-lib-win ; zip -r stg-heap-win.zip * ; cd ..
    - cd bin-lib-linux ; zip -r stg-heap-linux.zip * ; cd ..
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./stg-heap-win.zip ${URL_WIN}'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./stg-heap-linux.zip ${URL_LINUX}'
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release created in gitlab CI. To compile from source, download the source and follow the instructions in the readme.md'
    ref: $CI_COMMIT_SHA
    assets:
      links:
        - name: 'Windows library (binary release)'
          url: ${URL_WIN}
        - name: 'Linux static library (binary release)'
          url: ${URL_LINUX}
